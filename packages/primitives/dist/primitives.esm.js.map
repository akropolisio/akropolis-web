{"version":3,"file":"primitives.esm.js","sources":["../src/bnHexWei/utils/isHex.ts","../src/bnHexWei/utils/hexStripPrefix.ts","../src/bnHexWei/utils/hexToBn.ts","../src/bnHexWei/utils/isToBN.ts","../src/bnHexWei/utils/bnToBn.ts","../src/bnHexWei/utils/decimalsToWei.ts","../src/bnHexWei/utils/fromBaseUnit.ts","../src/bnHexWei/utils/getSignificantValue.ts","../src/bnHexWei/utils/isEqualHex.ts","../src/bnHexWei/utils/max.ts","../src/bnHexWei/utils/min.ts","../src/bnHexWei/utils/roundWei.ts","../src/bnHexWei/utils/toBaseUnit.ts","../src/bnHexWei/utils/getDecimal.ts","../src/bnHexWei/format/formatInteger.ts","../src/bnHexWei/format/balance/types.ts","../src/bnHexWei/format/balance/makeFormattedBalance.ts","../src/bnHexWei/format/balance/formatBalance.ts","../src/fraction/index.ts","../src/entities/Currency.ts","../src/entities/Token.ts","../src/entities/amount/Amount.ts","../src/entities/TokenAmount.ts","../src/entities/amount/utils/denormolizeAmount.ts","../src/entities/amount/utils/normalizeAmounts.ts","../src/entities/amount/utils/calcAvg.ts","../src/entities/amount/utils/sumTokenAmountsByToken.ts","../src/entities/PercentAmount.ts","../src/entities/LiquidityAmount.ts","../src/constants/index.ts","../src/entities/AllCoinsToken.ts"],"sourcesContent":["const HEX_REGEX = /^0x[a-fA-F0-9]+$/;\n\nexport function isHex(value: any, bitLength = -1, ignoreLength = false): value is string {\n  const isValidHex =\n    value === '0x' ||\n    ((typeof value === 'string' || value instanceof String) && HEX_REGEX.test(value.toString()));\n\n  if (isValidHex && bitLength !== -1) {\n    return value.length === 2 + Math.ceil(bitLength / 4);\n  }\n\n  return isValidHex && (ignoreLength || value.length % 2 === 0);\n}\n","import { isHex } from './isHex';\n\nconst UNPREFIX_HEX_REGEX = /^[a-fA-F0-9]+$/;\n\nexport function hexStripPrefix(value?: string | null): string {\n  if (!value) {\n    return '';\n  }\n\n  const hasPrefix = !!(value && isHex(value, -1, true) && value.substr(0, 2) === '0x');\n\n  if (hasPrefix) {\n    return value.substr(2);\n  }\n\n  if (UNPREFIX_HEX_REGEX.test(value)) {\n    return value;\n  }\n\n  throw new Error(`Invalid hex ${value} passed to hexStripPrefix`);\n}\n","import BN from 'bn.js';\n\nimport { hexStripPrefix } from './hexStripPrefix';\n\ninterface ToBnOptions {\n  isLe?: boolean;\n  isNegative?: boolean;\n}\n\nfunction reverse(value: string): string {\n  return (value.match(new RegExp('.{1,2}', 'g')) || []).reverse().join('');\n}\n\nexport function hexToBn(\n  value?: string | number | null,\n  options: ToBnOptions | boolean = { isLe: false, isNegative: false },\n): BN {\n  if (!value) {\n    return new BN(0);\n  }\n\n  const newOptions: ToBnOptions = {\n    isLe: false,\n    isNegative: false,\n    ...(typeof options === 'boolean' ? { isLe: options } : options),\n  };\n\n  const newValue = hexStripPrefix(value as string);\n  const bn = new BN((newOptions.isLe ? reverse(newValue) : newValue) || '00', 16);\n\n  return newOptions.isNegative ? bn.fromTwos(newValue.length * 4) : bn;\n}\n","import { IToBN } from '../types';\n\nexport function isToBN(value: unknown): value is IToBN {\n  return typeof value === 'object' && !!value && 'toBN' in value;\n}\n","import BN from 'bn.js';\n\nimport { IToBN } from '../types';\nimport { isHex } from './isHex';\nimport { hexToBn } from './hexToBn';\nimport { isToBN } from './isToBN';\n\nexport function bnToBn(value?: IToBN | BN | string | number | null): BN {\n  if (!value) {\n    return new BN(0);\n  }\n  if (isHex(value, undefined, true)) {\n    return hexToBn(value.toString());\n  }\n\n  const convertedToBnValue = isToBN(value) ? value.toBN() : new BN(value);\n\n  return BN.isBN(value) ? value : convertedToBnValue;\n}\n","import BN from 'bn.js';\n\nexport function decimalsToWei(decimals: number) {\n  return new BN(10).pow(new BN(decimals));\n}\n","import BN from 'bn.js';\n\nconst zero = new BN(0);\nconst negative1 = new BN(-1);\n\nexport function fromBaseUnit(input: BN | string, decimals: number): string {\n  let wei = new BN(input);\n  const negative = wei.lt(zero);\n  const base = new BN(10).pow(new BN(decimals));\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  let fraction = wei.mod(base).toString(10);\n\n  while (fraction.length < decimals) {\n    fraction = `0${fraction}`;\n  }\n\n  fraction = fraction.replace(/^(.+?)0+$/, '$1');\n\n  const whole = wei.div(base).toString(10);\n\n  let value = `${whole}${fraction === '0' ? '' : `.${fraction}`}`;\n\n  if (negative) {\n    value = `-${value}`;\n  }\n\n  return value;\n}\n","import { ICurrency } from '../../entities';\nimport { decimalsToWei } from './decimalsToWei';\n\nexport function getSignificantValue(\n  { symbol, decimals }: ICurrency,\n  significantFractionalDigits?: number,\n) {\n  const fractionalDigits = significantFractionalDigits || getSignificantFractionalDigits(symbol);\n  return decimalsToWei(Math.max(0, decimals - fractionalDigits));\n}\n\n// fractional digits should be based on the equivalent of 0.01$ in a given currency\nfunction getSignificantFractionalDigits(currencySymbol: string): number {\n  switch (currencySymbol.toUpperCase()) {\n    case 'BTC':\n    case 'RENBTC':\n    case 'WBTC':\n    case 'SBTC':\n    case 'YFI': {\n      return 7;\n    }\n    default: {\n      return 5;\n    }\n  }\n}\n","export function isEqualHex(a: string, b: string) {\n  return a.toLowerCase() === b.toLowerCase();\n}\n","import BN from 'bn.js';\n\nimport { IToBN } from '../types';\nimport { bnToBn } from './bnToBn';\n\nexport function max<Value extends IToBN | BN | string | number | null>(\n  first: Value,\n  ...rest: Array<Value>\n): Value {\n  return rest.reduce((acc, cur) => {\n    const accBn = bnToBn(acc);\n    const curBn = bnToBn(cur);\n\n    return accBn.gt(curBn) ? acc : cur;\n  }, first);\n}\n","import BN from 'bn.js';\n\nimport { IToBN } from '../types';\nimport { bnToBn } from './bnToBn';\n\nexport function min<Value extends IToBN | BN | string | number | null>(\n  first: Value,\n  ...rest: Array<Value>\n): Value {\n  return rest.reduce<Value>((acc, cur) => {\n    const accBn = bnToBn(acc);\n    const curBn = bnToBn(cur);\n\n    return accBn.lt(curBn) ? acc : cur;\n  }, first);\n}\n","import BN from 'bn.js';\n\nimport { decimalsToWei } from './decimalsToWei';\n\nexport function roundWei(\n  value: string | BN,\n  decimals: number,\n  variant: 'ceil' | 'floor' | 'half-away-from-zero',\n  significant: number,\n): BN {\n  const bnValue = new BN(value);\n\n  const multiplierDecimals = Math.max(0, decimals - significant);\n  const multiplier = decimalsToWei(multiplierDecimals);\n\n  if (!multiplierDecimals) {\n    return bnValue;\n  }\n\n  const absFloorRounded = bnValue.abs().div(multiplier).mul(multiplier);\n  const mod = bnValue.sub(absFloorRounded);\n\n  const isNeedUpToCeil =\n    (variant === 'ceil' && !bnValue.eq(absFloorRounded)) ||\n    (variant === 'half-away-from-zero' && mod.gte(multiplier.divn(2)));\n\n  return absFloorRounded\n    .add(isNeedUpToCeil ? multiplier : new BN(0))\n    .muln(bnValue.isNeg() ? -1 : 1);\n}\n","import BN from 'bn.js';\n\nconst negative1 = new BN(-1);\n\nexport function toBaseUnit(input: string, decimals: number): BN {\n  let inputStr = input;\n  const base = new BN(10).pow(new BN(decimals));\n\n  // Is it negative?\n  const negative = inputStr.substring(0, 1) === '-';\n  if (negative) {\n    inputStr = inputStr.substring(1);\n  }\n\n  if (inputStr === '.') {\n    throw new Error(`While converting number \"${input}\" to base units, invalid value`);\n  }\n\n  // Split it into a whole and fractional part\n  const comps = inputStr.split('.');\n  if (comps.length > 2) {\n    throw new Error(`While converting number \"${input}\" to base units, too many decimal points`);\n  }\n\n  let whole = comps[0];\n  let fraction = comps[1];\n\n  if (!whole) {\n    whole = '0';\n  }\n  if (!fraction) {\n    fraction = '';\n  }\n  if (fraction.length > decimals) {\n    throw new Error(`While converting number \"${input}\" to base units, too many decimal places`);\n  }\n\n  while (fraction.length < decimals) {\n    fraction += '0';\n  }\n\n  let inBaseUnit = new BN(whole).mul(base).add(new BN(fraction));\n\n  if (negative) {\n    inBaseUnit = inBaseUnit.mul(negative1);\n  }\n\n  return new BN(inBaseUnit.toString(10), 10);\n}\n","import { Decimal } from '../types';\n\nexport function getDecimal(value: string, baseDecimals: number, precision: number): Decimal {\n  if (value.length === 0 || value === '0') {\n    return { fractional: '', integer: '0' };\n  }\n\n  const isNegative = value[0].startsWith('-');\n  const positiveValue = isNegative ? value.substr(1) : value;\n\n  const mid = positiveValue.length - baseDecimals;\n  const integer = positiveValue.substr(0, mid);\n  const padding = mid < 0 ? 0 - mid : 0;\n\n  const minPrecision =\n    baseDecimals - precision > positiveValue.length - 1\n      ? baseDecimals - positiveValue.length + 1\n      : precision;\n  const decimalsZerosLength = baseDecimals < minPrecision ? baseDecimals : minPrecision;\n\n  // TODO: refactor\n  const fractional = `${`${'0'.repeat(padding)}${positiveValue}`.substr(\n    mid < 0 ? 0 : mid,\n  )}000`.substr(0, decimalsZerosLength);\n\n  return { fractional, integer: `${isNegative ? '-' : ''}${integer || '0'}` };\n}\n","const NUMBER_REGEX = new RegExp('(\\\\d+?)(?=(\\\\d{3})+(?!\\\\d)|$)', 'g');\n\nexport function formatInteger(value: string): string {\n  if (value.length === 0) {\n    return '0';\n  }\n\n  const isNegative = value[0].startsWith('-');\n  const matched = isNegative ? value.substr(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);\n\n  return matched ? `${isNegative ? '-' : ''}${matched.join(',')}` : value;\n}\n","export type FormattedBalance = {\n  formatted: string;\n  detailed: {\n    startSymbol: string;\n    startSpace: string;\n    negativeSign: string;\n    integer: string;\n    decimalSeparator: string;\n    fractional: string;\n    siPower: string;\n    endSpace: string;\n    endSymbol: string;\n  };\n};\n\nexport type SI = {\n  power: number;\n  value: string;\n};\n\nexport type FormattingVariant = 'default' | 'trim-fractional-zeros';\n\nconst startPositions = ['start-space', 'start'] as const;\nconst endPositions = ['end-space', 'end'] as const;\ntype StartSymbolPosition = typeof startPositions[number];\ntype EndSymbolPosition = typeof endPositions[number];\n\nexport type SymbolPosition = StartSymbolPosition | EndSymbolPosition;\n\nexport function isStartPosition(value: SymbolPosition): value is StartSymbolPosition {\n  return (startPositions as Readonly<SymbolPosition[]>).includes(value);\n}\n","import { formatInteger } from '../formatInteger';\nimport { FormattedBalance, FormattingVariant, isStartPosition, SI, SymbolPosition } from './types';\n\nconst nbsp = ' ';\n\nexport function makeFormattedBalance({\n  rawInteger,\n  rawFractional = '',\n  symbolPosition,\n  tokenSymbol,\n  variant,\n  si,\n}: {\n  tokenSymbol: string;\n  symbolPosition: SymbolPosition;\n  rawInteger: string;\n  rawFractional?: string;\n  variant: FormattingVariant;\n  si?: SI | null;\n}): FormattedBalance {\n  const isStartUnit = isStartPosition(symbolPosition);\n  const isNegative = rawInteger[0]?.startsWith('-');\n\n  const startSymbol = isStartUnit ? tokenSymbol : '';\n  const startSpace = symbolPosition === 'start-space' ? nbsp : '';\n  const negativeSign = isNegative ? '-' : '';\n  const integer = formatInteger(isNegative ? rawInteger.substr(1) : rawInteger) || '0';\n  const fractional = {\n    default: () => rawFractional,\n    'trim-fractional-zeros': () => rawFractional.replace(/^(\\d*?)0*$/, '$1'),\n  }[variant]();\n  const decimalSeparator = fractional ? '.' : '';\n  const siPower = si?.value || '';\n  const endSpace = symbolPosition === 'end-space' ? nbsp : '';\n  const endSymbol = !isStartUnit ? tokenSymbol : '';\n\n  return {\n    formatted: [\n      startSymbol,\n      startSpace,\n      negativeSign,\n      integer,\n      decimalSeparator,\n      fractional,\n      siPower,\n      endSpace,\n      endSymbol,\n    ]\n      .join('')\n      .trim(),\n    detailed: {\n      startSymbol,\n      startSpace,\n      negativeSign,\n      integer,\n      decimalSeparator,\n      fractional,\n      siPower,\n      endSpace,\n      endSymbol,\n    },\n  };\n}\n","import BN from 'bn.js';\n\nimport { IToBN } from '../../types';\nimport { getDecimal, bnToBn } from '../../utils';\nimport { makeFormattedBalance } from './makeFormattedBalance';\nimport { FormattedBalance, FormattingVariant, SI, SymbolPosition } from './types';\n\ninterface IFormatBalanceOptions {\n  amountInBaseUnits: string | BN | IToBN;\n  baseDecimals: number;\n  tokenSymbol?: string;\n  precision?: number;\n  variant?: FormattingVariant;\n  symbolPosition?: SymbolPosition;\n  withSI?: boolean;\n}\n\nexport function formatBalance({\n  amountInBaseUnits,\n  baseDecimals,\n  tokenSymbol = '',\n  precision = 2,\n  variant = 'default',\n  symbolPosition = 'end-space',\n  withSI = false,\n}: IFormatBalanceOptions): FormattedBalance {\n  const balanceString = bnToBn(amountInBaseUnits).toString();\n\n  if (balanceString.length === 0 || balanceString === '0') {\n    return makeFormattedBalance({\n      rawInteger: '0',\n      rawFractional: '',\n      variant,\n      symbolPosition,\n      tokenSymbol,\n    });\n  }\n\n  const { fractional, integer } = getDecimal(balanceString, baseDecimals, precision);\n\n  const si = withSI ? calcSI(integer) : null;\n\n  if (!si) {\n    return makeFormattedBalance({\n      rawInteger: integer,\n      rawFractional: fractional,\n      variant,\n      symbolPosition,\n      tokenSymbol,\n    });\n  }\n\n  const { integer: integerSI, fractional: fractionalSI } = getDecimal(\n    balanceString,\n    baseDecimals + si.power,\n    precision,\n  );\n\n  return makeFormattedBalance({\n    rawInteger: integerSI,\n    rawFractional: fractionalSI,\n    variant,\n    symbolPosition,\n    tokenSymbol,\n    si,\n  });\n}\n\nexport function calcSI(baseNumber: string) {\n  const digit = baseNumber.length;\n  if (digit > 9) return precisions.billion;\n  if (digit > 6) return precisions.million;\n  if (digit > 3) return precisions.thousand;\n  return null;\n}\n\nexport const precisions: Record<string, SI> = {\n  thousand: {\n    power: 3,\n    value: 'K',\n  },\n  million: {\n    power: 6,\n    value: 'M',\n  },\n  billion: {\n    power: 9,\n    value: 'B',\n  },\n};\n","// eslint-disable-next-line max-classes-per-file\nimport BN from 'bn.js';\n\nimport { getDecimal, bnToBn, IToBN, Decimal, decimalsToWei } from '../bnHexWei';\n\nexport type Value = number | string | BN | IToBN | Fraction | IToFraction;\n\nexport interface IToFraction {\n  toFraction(): Fraction;\n}\n\nexport class Fraction implements IToBN {\n  static decimalsAccuracy = 18;\n  static maxWordsInNumerator = 96;\n\n  public readonly numerator: BN;\n  public readonly denominator: BN;\n\n  constructor(\n    numerator: string | number | BN | IToBN,\n    denominator: string | number | BN | IToBN = new BN(1),\n  ) {\n    const [roundedNumerator, roundedDenominator] = this.round(\n      bnToBn(numerator),\n      bnToBn(denominator),\n    );\n    this.numerator = roundedNumerator;\n    this.denominator = roundedDenominator;\n  }\n\n  static isFraction(value: unknown): value is Fraction {\n    return value instanceof Fraction;\n  }\n\n  toBN() {\n    return this.numerator.div(this.denominator);\n  }\n\n  public toDecimal(baseDecimals: number, precision: number): Decimal {\n    const multiplier = new BN(10).pow(new BN(precision));\n    return getDecimal(\n      this.numerator.mul(multiplier).div(this.denominator).toString(),\n      baseDecimals + precision,\n      precision,\n    );\n  }\n\n  add(value: Value) {\n    const { denominator, numerator } = toFraction(value);\n    return new Fraction(\n      this.numerator.mul(denominator).add(numerator.mul(this.denominator)),\n      this.denominator.mul(denominator),\n    );\n  }\n\n  sub(value: Value) {\n    const { denominator, numerator } = toFraction(value);\n    return new Fraction(\n      this.numerator.mul(denominator).sub(numerator.mul(this.denominator)),\n      this.denominator.mul(denominator),\n    );\n  }\n\n  div(value: Value) {\n    const { denominator, numerator } = toFraction(value);\n    return new Fraction(this.numerator.mul(denominator), this.denominator.mul(numerator));\n  }\n\n  mul(value: Value) {\n    const { denominator, numerator } = toFraction(value);\n    return new Fraction(this.numerator.mul(numerator), this.denominator.mul(denominator));\n  }\n\n  eq(value: Value): boolean {\n    return this.toBN().eq(toFraction(value).toBN());\n  }\n\n  gt(value: Value): boolean {\n    const { denominator, numerator } = toFraction(value);\n    return this.numerator.mul(denominator).gt(numerator.mul(this.denominator));\n  }\n\n  lt(value: Value): boolean {\n    const { denominator, numerator } = toFraction(value);\n    return this.numerator.mul(denominator).lt(numerator.mul(this.denominator));\n  }\n\n  lte(value: Value): boolean {\n    const { denominator, numerator } = toFraction(value);\n    return this.numerator.mul(denominator).lte(numerator.mul(this.denominator));\n  }\n\n  gte(value: Value): boolean {\n    const { denominator, numerator } = toFraction(value);\n    return this.numerator.mul(denominator).gte(numerator.mul(this.denominator));\n  }\n\n  abs(): Fraction {\n    return new Fraction(this.numerator.abs(), this.denominator.abs());\n  }\n\n  pow(rawPower: BN | IToBN | number) {\n    const power = bnToBn(rawPower);\n    return new Fraction(this.numerator.pow(power), this.denominator.pow(power));\n  }\n\n  isZero() {\n    return this.numerator.isZero();\n  }\n\n  isNeg() {\n    return this.numerator.isNeg();\n  }\n\n  toNumber() {\n    return parseFloat(this.toString());\n  }\n\n  toString() {\n    const fractionalPrecisionMultiplier = new BN(10).pow(new BN(Fraction.decimalsAccuracy));\n\n    const integer = this.numerator.div(this.denominator);\n    const remainder = this.numerator.sub(this.denominator.mul(integer));\n    const fractional = remainder\n      .add(this.denominator) // add one denominator so that after division we get result: `fractionalPrecisionMultiplier + fractional = 100023` (1.00023 without fractionalPrecisionMultiplier multiplying)\n      .mul(fractionalPrecisionMultiplier)\n      .div(this.denominator)\n      .toString()\n      .slice(1); // remove the first digit to take a fraction with padding 100023 -> 00023\n\n    return `${integer}.${fractional}`;\n  }\n\n  valueOf() {\n    return this.toNumber();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  round(numerator: BN, denominator: BN) {\n    if ((numerator as any).length <= Fraction.maxWordsInNumerator) {\n      return [numerator, denominator];\n    }\n\n    return [\n      numerator.mul(decimalsToWei(Fraction.decimalsAccuracy)).div(denominator),\n      decimalsToWei(Fraction.decimalsAccuracy),\n    ];\n  }\n}\n\nexport function toFraction(value: Value): Fraction {\n  if (value instanceof Fraction) {\n    return value;\n  }\n  if (typeof value === 'object' && 'toFraction' in value) {\n    return value.toFraction();\n  }\n  if (typeof value === 'number') {\n    const integer = Math.floor(value);\n    const fractional = value - integer;\n\n    if (fractional) {\n      return new Fraction(fractional.toFixed(18).replace(/0\\.(\\d+)/, '1$1'), decimalsToWei(18))\n        .sub(new BN(1))\n        .add(new BN(integer));\n    }\n\n    return new Fraction(new BN(integer));\n  }\n  return new Fraction(value);\n}\n","import { IBrand } from '../bnHexWei';\n\nconst uniqType = Symbol('Currency');\n\nexport interface ICurrency {\n  readonly symbol: string;\n  readonly decimals: number;\n  toJSON(): { _type: string };\n  equals(a: this): boolean;\n}\n\nexport class Currency implements ICurrency, IBrand {\n  public _type: typeof uniqType = uniqType;\n\n  constructor(public readonly symbol: string, public readonly decimals: number) {}\n\n  toJSON(): { _type: string } {\n    const view: CurrencyJSONView = {\n      _type: 'Currency',\n      symbol: this.symbol,\n      decimals: this.decimals,\n    };\n\n    return view;\n  }\n\n  equals(a: Currency): boolean {\n    return this.symbol === a.symbol && this.decimals === a.decimals;\n  }\n}\n\ninterface CurrencyJSONView {\n  _type: 'Currency';\n  symbol: string;\n  decimals: number;\n}\n","import { IBrand, isEqualHex } from '../bnHexWei';\nimport { ICurrency } from './Currency';\n\nconst uniqType = Symbol('Token');\n\nexport type Network = 'eth' | 'bsc';\n\nexport class Token implements ICurrency, IBrand {\n  public _type: typeof uniqType = uniqType;\n\n  constructor(\n    public readonly address: string,\n    public readonly symbol: string,\n    public readonly decimals: number,\n    public readonly network: Network,\n  ) {}\n\n  toJSON() {\n    const view: TokenJSONView = {\n      _type: 'Token',\n      address: this.address,\n      symbol: this.symbol,\n      decimals: this.decimals,\n      network: this.network,\n    };\n\n    return view;\n  }\n\n  equals(a: Token): boolean {\n    return isEqualHex(this.address, a.address);\n  }\n}\n\ninterface TokenJSONView {\n  _type: 'Token';\n  address: string;\n  symbol: string;\n  decimals: number;\n  network: Network;\n}\n","import BN from 'bn.js';\n\nimport { IToBN, Decimal, FormattedBalance, getSignificantValue } from '../../bnHexWei';\nimport { Fraction, toFraction, Value, IToFraction } from '../../fraction';\nimport { ICurrency } from '../Currency';\n\nexport interface NormalizedAmount<T extends Amount> {\n  decimals: number;\n  value: Fraction;\n  original: T;\n}\n\nexport abstract class Amount<C extends ICurrency = ICurrency> implements IToBN, IToFraction {\n  public abstract _type: symbol;\n  private value: Fraction;\n\n  constructor(amount: Value, public readonly currency: C) {\n    this.value = toFraction(amount);\n  }\n\n  public abstract makeAmount(amount: Value, currency: C): this;\n  public abstract toFormattedBalance(\n    precision?: number,\n    withSymbol?: boolean,\n    withSI?: boolean,\n  ): FormattedBalance;\n\n  public toFormattedString(precision?: number, withSymbol?: boolean): string {\n    return this.toFormattedBalance(precision, withSymbol).formatted;\n  }\n\n  public toShortString(precision?: number, withSymbol?: boolean): string {\n    return this.toFormattedBalance(precision, withSymbol, true).formatted;\n  }\n\n  public withValue(newValue: Value): this {\n    return this.makeAmount(toFraction(newValue), this.currency);\n  }\n\n  public sub(value: Value): this {\n    return this.makeAmount(this.value.sub(toFraction(value)), this.currency);\n  }\n\n  public add(value: Value): this {\n    return this.makeAmount(this.value.add(toFraction(value)), this.currency);\n  }\n\n  public div(value: Value): this {\n    return this.makeAmount(this.value.div(toFraction(value)), this.currency);\n  }\n\n  public mul(value: Value): this {\n    return this.makeAmount(this.value.mul(toFraction(value)), this.currency);\n  }\n\n  public isZero(): boolean {\n    return this.value.isZero();\n  }\n\n  public isNeg(): boolean {\n    return this.value.isNeg();\n  }\n\n  public eq(value: this): boolean {\n    return this.eqValues(value) && this.currency.equals(value.currency);\n  }\n\n  public eqValues(value: Value): boolean {\n    return this.value.eq(toFraction(value));\n  }\n\n  // TODO make allowance for currency.decimals\n  public gt(value: Value): boolean {\n    return this.value.gt(toFraction(value));\n  }\n\n  public lt(value: Value): boolean {\n    return this.value.lt(toFraction(value));\n  }\n\n  public gte(value: Value): boolean {\n    return this.value.gte(toFraction(value));\n  }\n\n  public lte(value: Value): boolean {\n    return this.value.lte(toFraction(value));\n  }\n\n  public abs() {\n    return this.value.abs();\n  }\n\n  public pow(power: BN | IToBN | number) {\n    return this.value.pow(power);\n  }\n\n  public toBN(): BN {\n    return this.value.toBN();\n  }\n\n  public toFraction(): Fraction {\n    return this.value;\n  }\n\n  public toDecimal(precision: number): Decimal {\n    return this.value.toDecimal(this.currency.decimals, precision);\n  }\n\n  public toNumber(): number {\n    return this.value.toNumber();\n  }\n\n  public toString(base?: number | 'hex' | undefined, length?: number | undefined): string {\n    return this.toBN().toString(base, length);\n  }\n\n  public valueOf(): number {\n    return this.value.valueOf();\n  }\n\n  public toSignificantValue(significantFractionalDigits?: number): this {\n    const minSignificantValue = getSignificantValue(this.currency, significantFractionalDigits);\n    return this.gte(minSignificantValue) ? this : this.makeAmount(0, this.currency);\n  }\n}\n","import { formatBalance, FormattedBalance } from '../bnHexWei';\nimport { Value } from '../fraction';\nimport { Token } from './Token';\nimport { Amount } from './amount/Amount';\n\nconst uniqType = Symbol('TokenAmount');\n\nexport class TokenAmount extends Amount<Token> {\n  public _type: typeof uniqType = uniqType;\n\n  // eslint-disable-next-line class-methods-use-this\n  public makeAmount(amount: Value, token: Token): this {\n    return new TokenAmount(amount, token) as this;\n  }\n\n  public toFormattedBalance(\n    precision: number = 2,\n    withSymbol = true,\n    withSI?: boolean,\n  ): FormattedBalance {\n    return formatBalance({\n      withSI,\n      amountInBaseUnits: this.toBN(),\n      tokenSymbol: withSymbol ? this.currency.symbol : undefined,\n      baseDecimals: this.currency.decimals,\n      precision,\n      symbolPosition: 'end-space',\n    });\n  }\n\n  public withToken(newToken: Token): TokenAmount {\n    return new TokenAmount(this.toFraction(), newToken);\n  }\n}\n","import { decimalsToWei } from '../../../bnHexWei';\nimport { TokenAmount } from '../../TokenAmount';\nimport { Token } from '../../Token';\nimport { Amount } from '../Amount';\n\n// TODO: Fix spelling denormolize > denormalize\nexport function denormolizeAmount<T extends Amount>(amount: T, token: Token): TokenAmount {\n  const fractionAmount = amount.toFraction();\n\n  return new TokenAmount(\n    amount.currency.decimals > token.decimals\n      ? fractionAmount.div(decimalsToWei(amount.currency.decimals - token.decimals))\n      : fractionAmount.mul(decimalsToWei(token.decimals - amount.currency.decimals)),\n    token,\n  );\n}\n","import { decimalsToWei } from '../../../bnHexWei';\nimport { Amount, NormalizedAmount } from '../Amount';\n\nexport function normalizeAmounts<T extends Amount>(\n  amounts: T[],\n  decimals?: number,\n): NormalizedAmount<T>[] {\n  if (amounts.length < 1) {\n    return [];\n  }\n\n  const maxDecimal =\n    decimals !== undefined\n      ? decimals\n      : amounts\n          .map(amount => amount.currency.decimals)\n          .reduce((max, current) => (current > max ? current : max));\n\n  return amounts.map(amount => {\n    const diff = maxDecimal - amount.currency.decimals;\n    return {\n      decimals: maxDecimal,\n      original: amount,\n      value:\n        diff >= 0\n          ? amount.toFraction().mul(decimalsToWei(diff))\n          : amount.toFraction().div(decimalsToWei(-diff)),\n    };\n  });\n}\n","import { Value, toFraction, Fraction } from '../../../fraction';\n\ntype Input = {\n  value: Value;\n  weight?: Value;\n};\n\n/**\n * Calculate average value with values weight\n * @return avg(x1, x2) = (x1.value * x1.weight + x2.value * x2.weight) / (x1.weight + x2.weight)\n */\nexport function calcAvg(...rest: Input[]): Fraction {\n  if (rest.length <= 1) {\n    return toFraction((rest.length && rest[0].value) || 0);\n  }\n\n  const avg = rest.reduce((x1, x2) => {\n    const weight1 = toFraction(x1.weight || 1);\n    const weight2 = toFraction(x2.weight || 1);\n    const value1 = toFraction(x1.value);\n    const value2 = toFraction(x2.value);\n\n    const fullWeight = weight1.add(weight2);\n\n    if (fullWeight.isZero()) {\n      return { value: 0, weight: 0 };\n    }\n\n    return {\n      value: value1.mul(weight1).add(value2.mul(weight2)).div(fullWeight),\n      weight: fullWeight,\n    };\n  });\n\n  return toFraction(avg.value);\n}\n","import { TokenAmount } from '../../TokenAmount';\n\nexport function sumTokenAmountsByToken(amounts: TokenAmount[]): TokenAmount[] {\n  const reducedAmounts = amounts.reduce((acc, cur) => {\n    const prev = acc.get(cur.currency.address)?.toFraction() || 0;\n    acc.set(cur.currency.address, cur.add(prev));\n    return acc;\n  }, new Map<string, TokenAmount>());\n\n  return Array.from(reducedAmounts.values());\n}\n","import BN from 'bn.js';\n\nimport { formatBalance, FormattedBalance } from '../bnHexWei';\nimport { Value } from '../fraction';\nimport { Amount } from './amount';\nimport { Currency } from './Currency';\n\nconst uniqType = Symbol('PercentAmount');\n\nexport class PercentAmount extends Amount<Currency> {\n  public _type: typeof uniqType = uniqType;\n\n  constructor(amount: Value) {\n    super(amount, new Currency('%', 0));\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public makeAmount(amount: Value): this {\n    return new PercentAmount(amount) as this;\n  }\n\n  public toFormattedBalance(\n    precision: number = 2,\n    withSymbol = true,\n    withSI?: boolean,\n  ): FormattedBalance {\n    const multiplier = new BN(10).pow(new BN(precision));\n    const value = this.toFraction().mul(multiplier);\n\n    return formatBalance({\n      withSI,\n      amountInBaseUnits: value.toBN(),\n      tokenSymbol: withSymbol ? this.currency.symbol : undefined,\n      baseDecimals: precision,\n      precision,\n      symbolPosition: 'end',\n    });\n  }\n}\n","import { formatBalance, FormattedBalance } from '../bnHexWei';\nimport { Value } from '../fraction';\nimport { Amount } from './amount';\nimport { Currency } from './Currency';\n\ntype SymbolPosition = 'start-space' | 'start' | 'end-space' | 'end';\nconst uniqType = Symbol('LiquidityAmount type');\n\nexport class LiquidityAmount extends Amount<Currency> {\n  public _type: typeof uniqType = uniqType;\n\n  private readonly defaultPrecision: number = this.options?.precisions || 2;\n  private readonly defaultSymbolPosition: SymbolPosition = this.options?.symbolPosition || 'start';\n\n  constructor(\n    amount: Value,\n    currency: Currency,\n    private options?: { precisions?: number; symbolPosition?: SymbolPosition },\n  ) {\n    super(amount, currency);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public makeAmount(amount: Value, currency: Currency): this {\n    return new LiquidityAmount(amount, currency, this.options) as this;\n  }\n\n  public toFormattedBalance(\n    precision: number = this.defaultPrecision,\n    withSymbol = true,\n    withSI?: boolean,\n  ): FormattedBalance {\n    return formatBalance({\n      withSI,\n      amountInBaseUnits: this.toBN(),\n      tokenSymbol: withSymbol ? this.currency.symbol : undefined,\n      baseDecimals: this.currency.decimals,\n      precision,\n      symbolPosition: this.defaultSymbolPosition,\n    });\n  }\n}\n","export const zeroAddress = '0x0000000000000000000000000000000000000000';\n\nexport const mainnetTokens = {\n  AKRO: '0x8ab7404063ec4dbcfd4598215992dc3f8ec853d7',\n  COMP: '0xc00e94cb662c3520282e6f5717214004a7f26888',\n  CRV: '0xd533a949740bb3306d119cc777fa900ba034cd52',\n  DAI: '0x6b175474e89094c44da98b954eedeac495271d0f',\n  SNX: '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f',\n  TUSD: '0x0000000000085d4780b73119b644ae5ecd22b376',\n  USDC: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n  USDT: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n  bUSD: '0x4fabb145d64652a948d72533023f6e7a623c7c53',\n  sUSD: '0x57ab1ec28d129707052df4df418d58a2d46d5f51',\n  '3Crv': '0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490',\n  crvSBTC: '0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3',\n  crvBUSD: '0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B',\n  crvCOMP: '0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2',\n  yCRV: '0xdf5e0e81dff6faf3a7e52ba697820c5e32d806a8',\n};\n","import { Token } from './Token';\nimport { zeroAddress } from '../constants';\n\nexport class AllCoinsToken extends Token {\n  constructor(public readonly tokens?: Token[], symbol: string = 'All Coins') {\n    super(zeroAddress, symbol, 18, 'eth');\n  }\n}\n"],"names":["HEX_REGEX","isHex","value","bitLength","ignoreLength","isValidHex","String","test","toString","length","Math","ceil","UNPREFIX_HEX_REGEX","hexStripPrefix","hasPrefix","substr","Error","reverse","match","RegExp","join","hexToBn","options","isLe","isNegative","BN","newOptions","newValue","bn","fromTwos","isToBN","bnToBn","undefined","convertedToBnValue","toBN","isBN","decimalsToWei","decimals","pow","zero","negative1","fromBaseUnit","input","wei","negative","lt","base","mul","fraction","mod","replace","whole","div","getSignificantValue","significantFractionalDigits","symbol","fractionalDigits","getSignificantFractionalDigits","max","currencySymbol","toUpperCase","isEqualHex","a","b","toLowerCase","first","rest","reduce","acc","cur","accBn","curBn","gt","min","roundWei","variant","significant","bnValue","multiplierDecimals","multiplier","absFloorRounded","abs","sub","isNeedUpToCeil","eq","gte","divn","add","muln","isNeg","toBaseUnit","inputStr","substring","comps","split","inBaseUnit","getDecimal","baseDecimals","precision","fractional","integer","startsWith","positiveValue","mid","padding","minPrecision","decimalsZerosLength","repeat","NUMBER_REGEX","formatInteger","matched","startPositions","isStartPosition","includes","nbsp","makeFormattedBalance","rawInteger","rawFractional","symbolPosition","tokenSymbol","si","isStartUnit","startSymbol","startSpace","negativeSign","decimalSeparator","siPower","endSpace","endSymbol","formatted","trim","detailed","formatBalance","amountInBaseUnits","withSI","balanceString","calcSI","power","integerSI","fractionalSI","baseNumber","digit","precisions","billion","million","thousand","Fraction","numerator","denominator","round","roundedNumerator","roundedDenominator","isFraction","toDecimal","toFraction","lte","rawPower","isZero","toNumber","parseFloat","fractionalPrecisionMultiplier","decimalsAccuracy","remainder","slice","valueOf","maxWordsInNumerator","floor","toFixed","uniqType","Symbol","Currency","toJSON","view","_type","equals","Token","address","network","Amount","amount","currency","toFormattedString","withSymbol","toFormattedBalance","toShortString","withValue","makeAmount","eqValues","toSignificantValue","minSignificantValue","TokenAmount","token","withToken","newToken","denormolizeAmount","fractionAmount","normalizeAmounts","amounts","maxDecimal","map","current","diff","original","calcAvg","avg","x1","x2","weight1","weight","weight2","value1","value2","fullWeight","sumTokenAmountsByToken","reducedAmounts","prev","get","set","Map","Array","from","values","PercentAmount","LiquidityAmount","defaultPrecision","defaultSymbolPosition","zeroAddress","mainnetTokens","AKRO","COMP","CRV","DAI","SNX","TUSD","USDC","USDT","bUSD","sUSD","crvSBTC","crvBUSD","crvCOMP","yCRV","AllCoinsToken","tokens"],"mappings":"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"}